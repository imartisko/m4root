# vim:wrap:spell:spelllang=cs,en
# 0x6aa82ab	20200107-04:30:30

6
Generování kódu v M4: úvod

15
Makro procesor M4 se používá ke generování libovolně složitého kódu z jednoduchého zdrojového kódu.
Úvodní díl seriálu obsahuje jeho historii, základní principy jazyka, příklady použití a nutné předpoklady pro zvládnutí tohoto geniálního nástroje.

23
Úvod

29
Čtenáři tohoto seriálu se naučí psát skripty pro strojové generování kódu.
Strojově generovaný kód může být libovolně složitý a může obsahovat další vnitřní závislosti.
Vzájemně závislé soubory se složitým kódem jsou pro člověka jen těžce udržitelné v konzistentním stavu.
Proto je vhodné použít nějaký mechanismus pro generování kódu.
Generování kódu provádí nástroj určený pro transformaci textu – makro procesor.

46
Seriál je zaměřen na praktické použití univerzálního makro procesoru M4 (dále jen M4) pomocí malých, ukázkových příkladů.
Popisuje též teoretický základ všech implementací.
Cílem seriálu je seznámit čtenáře s tímto nástrojem (m4 – je program příkazové řádky) a také programovacím jazykem (M4 – je programovací jazyk).

Na co se používá, jak se v něm programuje a jaké jsou jeho výhody a nevýhody.

62
[výsledkem seriálu je šablona napsaná v M4]

62
Vícejazyčný seriál „Generování kódu v M4“ je generován M4 skripty,
které (možná) usnadní psaní článků a seriálů pro www.root.cz (Root.cz – informace nejen ze světa Linuxu) také jiným autorům.

64
Úvodní díl popisuje základní principy jazyka na jednoduchých příkladech.
Všechny příklady používají přepisovací pravidla bezkontextové gramatiky.
Později se naučíme používat výstupní fronty,
automaty, asociativní paměti, zásobníky a zásobníkové automaty.
Naučíme se také psát testovací automaty pro testování vstupních dat.

80
Příklady pro čtenáře

86
Příklady pro čtenáře tvoří komplementární část seriálu a budou do jisté míry vytvářeny na základě podnětů v diskuzi pod článkem.
Na začátku každého dílu je popsána nějaká část jazyka M4 doplněná sadou příkladů na konci.
Každý díl je možné číst v libovolném pořadí.

97
Příklady generování kódu

97
Příklady preprocesoru

97
Jazyk M4 na příkladech

97
Proč používat M4 a proč ne?

97
http://github.com/jkubin/m4root (Generování kódu v M4) – složitější projekt generující HTML tohoto seriálu

116
Historie M4

122
Makro jazyky byly vynalezeny v době, kdy dominoval jazyk symbolických instrukcí (assembler).
Později byly použity k rozšíření kompilovaných programovacích jazyků, protože umožnily psát zdrojový kód na vyšší úrovni abstrakce než samotný programovací jazyk.

132
GPM (General Purpose Macro-generator)

136
Základní myšlenku přepisování textových řetězců s argumenty, které se přepíší do dalších rekurzivně přepisovatelných řetězců představil
Christopher Strachey (Wikipedie) ve svém
GPM (General Purpose Macro-generator) v roce 1965.
Další generace makro procesorů M3 a M4 původní GPM (General Purpose Macro-generator) v podstatě už jen rozšiřovaly.
Základní myšlenka původního návrhu ale zůstala stejná.

151
M3

157
Dennis Ritchie (Wikipedie) převzal základní myšlenku GPM (General Purpose Macro-generator) a napsal vylepšený makro procesor pro generování zdrojového kódu programovacího jazyka C (1972), který sám navrhl.
Nový makroprocesor napsal pro minipočítač AP-3 – odtud jméno M3.
Tento přímý předchůdce současného M4 dokázal výrazně ušetřit těžkou a časově náročnou práci, čímž zaujal vývojáře programující v jiných jazycích (FORTRAN (FORmula TRANslation), COBOL (COmmon Business-Oriented Language), PL/I (Programming Language One), …).
Vývojáři upravovali M3 pro tyto jazyky čímž ho proměnili na univerzálně použitelný makro procesor M4.

170
[m4 ∈ {množina nástrojů UNIX-u}]

170
Dennis Ritchie byl také spolutvůrcem operačního systému UNIX a proto:

170
M4 je minimalistický a rychlý, dělá jednu věc a tu dělá dobře (Filosofie UNIX-u)

170
výhradně spoléhá na neinteraktivní rozhraní příkazové řádky

170
parametry a závislosti M4 skriptů popisuje 

170
znakem  začíná jednořádkový komentář jako v UNIX-ovém shell-u

170
proměnné , , , , , , … mají podobný význam jako v shell-u

170
oddělovač argumentů je čárka

227
Makro procesor M3 rozšířil také Jim E. Weythman, autor programové konstrukce, která se používá téměř v každém M4 skriptu:

234
[idiomatický kód M4]

243
[divert(-1), divert(0), divert(1), …, divert(2147483647)]

243
Klíčové slovo  přepíná výstupní fronty.
Argument  zcela vypne jakýkoliv textový výstup.
Argument  přepne výstup na .

255
M4

261
Brian Kernighan (Wikipedie) makro procesor M3 rozšířil na preprocesor (Wikipedie) jazyka FORTRAN 66,
aby mohl vytvořit hybridní jazykovou nadstavbu pojmenovanou Ratfor (Rational Fortran).
Základní programové konstrukce této nadstavby (podmínky, cykly) jsou stejné jako v jazyce C.
Programování v Ratfor-u se tak podobá programování v „céčku“.
Makro procesor zdrojový kód překládá zpátky do FORTRAN-u, poté kompilátor provede překlad do strojového kódu.

276
[M4 doplňuje jazyk C]

276
Všimněte si téměř dokonalé symbiózy s jazykem C

276
direktivy CPP (Preprocesor jazyka C) , , , … jsou pro M4 komentáře

276
klíčová slova oddělená od závorek mezerou, ztrácí svůj původní význam

M4 například ignoruje funkci 


276
argumenty maker oddělují čárky stejně jako argumenty funkcí jazyka C

je-li definováno makro , jeho proměnné jsou:

, , , 


276
levý řídící znak  pro neterminály není součástí syntaxe rodiny jazyků C

276
pravý řídící znak  nevadí, není-li součástí makra
oba řídící znaky lze skrýt do uživatelsky definovaných maker , 

276
makra se píší , stejně jako neterminální symboly (Wikipedie)
tím je vymezen jejich jmenný prostor

355
Uživatelský manuál zmiňuje ještě další, zde neuvedené spoluautory.
Bylo by tedy značně nespravedlivé napsat, že autory makro procesoru M4 (1977) jsou pouze dva lidé.

382
GNU M4

388
Dnes existuje několik implementací lišící se od původní implementace spíše drobnostmi.
Nejrozšířenější implementace M4 je GNU M4 používaná pro Autotools (Wikipedie)
a pro překlad jednoduchého konfiguračního souboru  na složitý .
Autorem této implementace z roku 1990 je René Seindal (https://www.seindal.dk/rene/gnu/).
m4 (m4 s malým „m“ je nástroj) nainstalujeme následujícím příkazem:

403
[příkaz nainstaluje také další balíčky]

407
Podrobný popis klíčových slov naleznete v dokumentaci:

421
Základy jazyka M4

427
Základem jazyka M4 je bezkontextová gramatika, automaty, zásobníky a výstupní fronty.
Pro pochopení jazyka M4 je proto velmi důležité rozumět základním pojmům teorie formálních jazyků.
Co jsou terminální symboly (Wikipedie) (stručně terminály) a neterminální symboly (stručně neterminály).
Zmíněné pojmy si podrobněji vysvětlíme někdy později.
Cílem tohoto úvodního dílu je hlavně ukázat praktické použití M4 na příkladech.

442
Bezkontextová gramatika

448
Bezkontextová gramatika (krátce CFG (Context-Free Grammar – bezkontextová gramatika)) je formální gramatika, ve které mají všechna přepisovací pravidla tvar .
Neterminál  se přepíše na libovolně dlouhý řetězec  (pravá strana přepisovacího pravidla) složený z terminálů nebo neterminálů.
Kleene hvězda (Wikipedie)  znamená, že se neterminál  může přepsat na  (epsilon – prázdný symbol).

459
[formát přepisovacích pravidel bezkontextové gramatiky]

465
Přepisovací pravidla M4

471
Přepisovací pravidla M4 jsou stejná jako přepisovací pravidla bezkontextové gramatiky.

478
[formát přepisovacích pravidel M4]

487
Všechna klíčová slova M4 jsou neterminály (makra), provedou nějakou akci (změní vnitřní stav makro procesoru) a přepíší se na  (epsilon – prázdný symbol).
Klíčová slova mohou být přejmenována.

496
[všechna klíčová slova jazyka M4 jsou neterminály]

504
Řízení expanze neterminálů

510
Výchozí dvojice znaků  v M4 řídí expanzi neterminálů.
Klíčové slovo  je může změnit na jiné znaky, například {, , }.
Neterminály, které nechceme (ihned) expandovat, jsou obklopeny touto dvojicí znaků.
Při průchodu makro procesorem jsou všechny symboly mezi touto dvojicí znaků terminálními symboly a dvojice znaků je odstraněna.
Další průchod již způsobí expanzi původně chráněných neterminálů.
Dvojice řídících znaků se nastavují na začátku kořenového souboru.

528
Automaty

534
Automaty používají přepisovací pravidla gramatiky jako uzly a mění své stavy podle vstupních symbolů.
Aktuálně používané přepisovací pravidlo produkuje do výstupní fronty (nebo do několika výstupních front)
specifický kód, dokud automat nepřejde do jiného uzlu s jiným přepisovacím pravidlem.
Automaty slouží jako „přepínače“ pravidel gramatiky.
Generující automat je v příloze.

549
Výstupní fronty

555
Výstupní fronty jsou dočasné úložiště pro části výsledného kódu.
Tyto části výsledného kódu jsou produkovány přepisovacími pravidly gramatiky, které přepisují vstupní symboly.
Klíčové slovo  nastavuje aktuální výstupní frontu.
Na závěr jsou všechny neprázdné fronty vypsány ve vzestupném pořadí na standardní výstup a složí výsledný kód z částí kódu.
Výstupní fronty jsou ukázány v příloze.

570
Zásobníky si ukážeme později.

578
Hlavní použití M4

584
M4 se používá ke generování zdrojového kódu libovolného programovacího jazyka nebo jako preprocesor jakéhokoliv zdrojového kódu.

592
Generování kódu

598
M4 transformuje vstupní data ze souborů  (Macro Configuration) na výsledná data následujícím příkazem:

605
[← nejobecnější.m4 … nejspeciálnější.m4 →]

609
Během načítání souborů jsou prováděny dvě základní operace:

616
čtení transformačních pravidel ze souborů s příponou 

616
expanze maker uvnitř souborů s příponou 

634
Soubory  a  obsahují vstupní data ve specifickém formátu, který umožňuje jejich transformaci na výstupní data podle pravidel v předchozích  souborech.
Datové soubory  obvykle neobsahují žádná transformační pravidla.

643
Vstupní data mohou také přicházet z kolony:

650
[vstupní kód → generování zdrojového kódu → soubor]

654
[vstupní kód → generování zdrojového kódu → kompilace]

658
Vyzkoušejte: Příklady generování kódu

666
Preprocesor

672
M4 může pracovat v režimu preprocesoru.
Vstupní zdrojový kód jím prochází beze změny s výjimkou neterminálních symbolů.
Nalezené neterminály jsou expandovány na terminály a odchází spolu se zdrojovým kódem na výstup.
M4 může rozšířit jakýkoliv jiný jazyk, kde je preprocesor nedostatečný (bez rekurze) nebo žádný.
Důležité je zvolit vhodný levý znak pro řízení expanze neterminálů, který nesmí kolidovat se znakem vstupního zdrojového kódu.
Kolize znaku je ale snadno řešitelná.

689
[M4 jako preprocesor – obecně]

693
[M4 jako preprocesor – bez dočasného souboru]

697
M4 v režimu preprocesoru může být součástí kolony.
Konfliktní znak  ze vstupního zdrojového kódu je skryt do makra, například .
Prázdný pár řídících znaků  před makrem slouží jako oddělovač symbolů.

708
[M4 jako preprocesor s řídícími znaky: `']

712
Při průchodu zdrojového kódu makro procesorem se makro  přepíše zpátky na původní znak  a prázdný pár  je odstraněn.
Použijeme-li pro řízení expanze neterminálů hranaté závorky, skryjeme stejným způsobem levou  hranatou závorku.

721
[M4 jako preprocesor s řídícími znaky: []]

725
Pro řízeni expanze neterminálů lze použít netisknutelné znaky  (0x02) a  (0x06).
Tyto znaky nemohou kolidovat s tisknutelnými znaky zdrojového kódu.

734
[M4 jako preprocesor s řídícími znaky: ␂␆]

738
Vyzkoušejte: Příklady preprocesoru

743
Smíšený režim

749
Smíšený režim je kombinací předchozích režimů a je používán hlavně na pokusy.
Data nejsou oddělena od transformačních pravidel.
Listový soubor  obsahuje definice těchto pravidel spolu se vstupními daty.

760
[jak se naučit M4]

764
Vyzkoušejte: Jazyk M4 na příkladech

769
Předpoklady pro zvládnutí M4

775
Pro úspěšné zvládnutí tohoto makro-jazyka je důležité splnit několik předpokladů.
M4 není jednoduchý jazyk, protože není možné v něm myslet a programovat jako v běžném programovacím jazyce.
Nejdůležitější je uvědomit si, že se v něm programují přepisovací pravidla gramatiky.
Každý řetězec je buď terminální nebo neterminální symbol včetně všech klíčových slov jazyka ( a  jsou speciální případy neterminálů).

788
M4 záměrně nemá klíčová slova pro cykly (/), protože jeho základ je zcela jiný, než jaký mají procedurální nebo funkcionální jazyky.

788
cykly jsou pouze levo-rekurzivní nebo pravo-rekurzivní

788
větví se řetězením symbolů nebo klíčovými slovy , 

820
Základy gramatik

826
Základem všech gramatik jsou přepisovací pravidla, jejichž podobu obecně popisuje:

834
Formální gramatika (Chomského typu)

851
Formální gramatika (Wikipedie) popisuje podmnožiny (Chomského hierarchie) přepisovacích pravidel formálního jazyka (Wikipedie).
Jedna z podmnožin se jmenuje bezkontextová gramatika (Wikipedie), krátce CFG (Context-Free Grammar – bezkontextová gramatika).
Přepisovací pravidla CFG pracují stejně jako přepisovací pravidla jazyka M4.
Některý z následujících dílů seriálu se podrobněji zaměří na formální gramatiky.

865
Základy automatů

871
Schopnost používat převážně dvoustavové automaty je zásadní věc pro psaní jednoduchých M4 skriptů, protože převážná většina skriptů používá malé automaty.

879
Testovací automat

885
Pořadí vstupních symbolů nebo jejich kontext lze otestovat automatem.
Splňují-li vstupní symboly požadované vlastnosti, automat skončí v uzlu s dvojitým kroužkem (označuje akceptující stav nebo stavy).

909
Předchozí automat lze zapsat jako ASCII art doprovázející M4 skript:

916
[jak dokumentovat M4 kód]

926
Generující automat

932
Vstupní symboly mění uzly automatu, čímž zároveň mění přepisovací pravidla pro generování kódu.
Tento příklad naleznete v příloze:

941
[ASCII-art generujícího automatu]

947
První symbol ve stavu  vygeneruje záhlaví a první položku.
Poté automat přejde do stavu , ve kterém se přidávají další položky.
Automat zůstává v tomto stavu, dokud nejsou zpracována všechna data.

959
(GNU) make

967
Dobře navržený generátor kódu se obvykle skládá z několika menších souborů, jejichž pořadí, závislosti a parametry se zapisují do souboru .
Dobrá znalost tvorby  je proto základním předpokladem pro zvládnutí M4.
Čtení a údržba zdrojového kódu celkově zabere vždy více času než jeho tvorba.
Dobře strukturovaný  proto zásadním způsobem přispívá k celkové přehlednosti výsledného generátoru kódu.

980
[více v kapitole: „Pracovní postup“]

980
Spouštění  z editoru kódu pomocí vhodné klávesové zkratky zásadně urychluje vývoj M4 kódu.
Soubor  obsahuje .

990
Vim

996
Zvládnutí editoru Vim je důležitým předpokladem pro pohodlí a rychlost psaní kódu M4.
Vim zkratky, definované klíčovým slovem , ušetří velké množství zbytečně napsaného textu.
Tyto zkratky také významně snižují výskyt téměř neviditelných chyb způsobených nepárovou závorkou, čímž šetří ztracený čas vynaložený na ladění kódu.

1016
Talent a čas

1022
M4 nejde zvládnout přes víkend, zvláště chybí-li základy
teorie automatů (Wikipedie) a formálních gramatik (Wikipedie).
Pro zvládnutí M4 je nutné „odpřemýšlet si“ delší období a napsat velké množství špatného (složitého) M4 kódu, který z vlastní vůle přepíšete kvůli lepšímu nápadu.
Tímto způsobem je možné postupně získat určitou praxi.

1040
[M4 je těžký ⚠ jazyk!]

1040
Disclaimer 🕱: Větší M4 projekty vyžadují praxi!

1048
Příklady generování kódu

1048
Znaky {, , , } v názvu příkladu řídí expanzi neterminálů.

1056
Příklady v této příloze jsou složitější a jejich cílem je ukázat praktické použití jazyka M4.
Podrobněji budou vysvětleny později.

1066
Vstupní zdrojový kód

1072
Vstupní zdrojový kód je podobný CSV (Comma Separated Values), který se převede na libovolně složitý cílový kód jiného jazyka pomocí CFG (Context-Free Grammar – bezkontextová gramatika), automatů a výstupních front.
Zásobníky v příkladech nejsou použity.

1083
Vstupní soubor může obsahovat poznámky, které nemusí být skryté v komentářích , ,  nebo .

1091
 CSV – nejjednodušší příklad

1097
Tento příklad nepoužívá výstupní fronty, pouze generuje CSV (Comma Separated Values) oddělené znakem .

1107
 CSV – počítadlo

1113
Příklad používá makro  z kořenového souboru, jehož  (pravá strana přepisovacího pravidla) se zkopíruje do pravé strany makra .
Během první expanze  proběhne inicializace jeho startovací hodnoty.
Další expanze vrátí číselný terminální symbol a proběhne zvýšení pomocného (globálního) symbolu o jedničku.
 je malý automat.

1129
(jak to udělat) Úprava speciálních znaků

1135
Každý typ výstupního kódu vyžaduje úpravu speciálních znaků.
Použití klíčového slova  je nevhodné pro tento úkol.
Vstupní zdrojový kód proto napřed upravíme regulárním výrazem a všechny speciální znaky schováme do maker.
Soubor pro převod speciálních znaků do cílového kódu přidáme na příkazovou řádku.

1158
Upravený vstupní zdrojový kód

1166
 XML, HTML – soubor pro značkovací jazyky

1175
 C, JSON, INI – soubor pro "řetězce v uvozovkách"

1184
 Bash – soubor pro "řetězce v uvozovkách"

1192
 Bash – soubor pro 'řetězce v apostrofech'

1201
 C – výstupní fronta

1207
Příklad používá jednu výstupní frontu na znaky  pro uzavření pole na konci skriptu.

1217
 INI – externí příkaz

1223
Příklad spustí externí příkaz  a jeho výstup umístí do hranatých závorek.
Výstupem externího příkazu jsou dvě položky oddělené čárkou.
Makro  vybere první položku, protože druhá položka obsahuje nežádoucí znak nového řádku  (0x0a).

1237
 .h – hex počítadlo

1243
Příklad používá makro  pro číslování výsledných CPP (Preprocesor jazyka C) maker a jednu výstupní frontu.
Fronta číslo  obsahuje direktivu preprocesoru  pro zakončení hlavičkového souboru.
Převod dekadické hodnoty počítadla na dvoumístné hex-a číslo provádí klíčové slovo .

1258
 C – malý automat

1264
Příklad používá malý automat  pro generování znaku nového řádku  a jednu výstupní frontu číslo  do které se vloží znaky  pro uzavření výsledného řetězce.
Poprvé se  přepíše na  (epsilon – prázdný symbol), podruhé se přepíše na .

1276
 C – malý automat 2

1282
Tento příklad je podobný předchozímu, avšak každý řetězec je na novém řádku.

1292
 HTML – výstupní fronty

1298
Příklad používá dvě výstupní fronty.
Fronta číslo  obsahuje odstavce, fronta číslo  uzavírací značky HTML stránky.
Navigační odkazy nemusí být nikde uloženy, jdou přímo na výstup.
Zprávy typu  a  jsou zpracovány stejně jako zprávy typu .

1315
 Větvení gramatikou

1321
Příklad ukazuje větvení gramatikou, argumenty maker se ignorují.
Vstupní neterminály se přepisují na terminály (🐛), (🐜), (🐝).

1333
 JSON – generující automat

1339
Příklad používá dvě výstupní fronty a jeden generující automat.
První chybová zpráva  ve stavu  vygeneruje záhlaví se závorkami a vypíše na výstup první záznam.
Automat přejde do stavu  což je  pravidlo (takové pravidlo se používá jako pravá strana jiného přepisovacího pravidla).
Následující chybové zprávy ve stavu  pouze vypisují na výstup jednotlivé záznamy.
Na závěr výstupní fronty číslo  a  vypíšou znaky  a  čímž zakončí výsledný JSON.

1357
 JSON – pojmenované fronty

1363
Příklad zpracovává další zprávy typu  a .
Používá tři automaty a šest výstupních front.
Generujeme-li složitější zdrojový kód, brzy narazíme na problém udržení konzistence indexů pro výstupní fronty.
Abychom se vyhnuli zmatku, fronty si pojmenujeme a místo čísel používáme jména.

1385
Abychom nemuseli definovat podobná pravidla, zkopírujeme si pravou stranu 
(je to také  pravidlo (takové pravidlo se používá jako pravá strana jiného přepisovacího pravidla)) do pravé strany pravidel  a .
Proměnná  se přepíše na jméno makra a zřetězí se s dalším symbolem.
Nově vzniklý neterminál se přepíše na odpovídající terminální symbol.
Tímto způsobem se provádí větvení.

1398
[větvení gramatikou v M4]

1411
 JSON – generované indexy front

1417
Během vývoje se často mění pořadí a počet výstupních front, což také vyžaduje častou změnu jejich indexů.
Indexy je proto vhodné generovat.
Můžeme pak používat prakticky neomezený počet front.
Následující příklad ukazuje, jak se tyto indexy generují.

1433
 INI – nespojitý index front

1439
Příklad používá tři automaty a dvě výstupní fronty číslo  a  definované v odděleném souboru.
Názvy INI sekcí jsou generovány řetězením symbolů.
Příklad používá stejný soubor pro výstupní fronty jako příklad pro generování JSON.

1453
 XML – smíšené zprávy

1459
Příklad používá jednu výstupní frontu číslo  pro uzavírací značku .

1469
 XML – oddělené zprávy

1475
Příklad seskupuje zprávy podle jejich typu pomocí výstupních front.

1485
 Bash – 

1494
 Bash – 

1503
Příklady preprocesoru

1503
Znaky {, , , } v názvu příkladu řídí expanzi neterminálů.

1509
 Preprocesor jazyka C a M4

1515
Direktivy CPP (Preprocesor jazyka C) jsou pro M4 jednořádkový komentář, což brání nežádoucí expanzi stejně pojmenovaných maker.
Definujeme-li bezpečnější makro , stejně pojmenované makro  nebude přepsáno.
Jmenný prostor CPP (Preprocesor jazyka C) tak může být zcela oddělen od jmenného prostoru M4.
Problematický znak  je skryt do makra .
Apostrof  ve zdrojovém kódu ničemu nevadí.
Apostrof uvnitř makra  je skryt do makra .
Všimněte si jmen funkcí  nebo  a kde je expandován .

1537
 CSS – komentáře

1543
CSS používá znak  pro kódy barev, což je také začátek jednořádkového M4 komentáře.
Klíčové slovo  nastaví víceřádkový komentář  a přepíše se na  (epsilon – prázdný symbol).
Komentáře se vypínají stejným klíčovým slovem  bez parametrů.

1557
 Bash – netisknutelné znaky

1563
Bash používá oba znaky  .
Nechceme-li je skrývat do makra  nebo , můžeme použít pro řízení expanze neterminálů netisknutelné znaky, viz. příklad:

1575
Jazyk M4 na příkladech

1575
Znaky {, , , } v názvu příkladu řídí expanzi neterminálů.

1582
 JSON – levá závorka 

1588
Uvnitř hranatých závorek .
Proto je levá hranatá závorka  nahrazena makrem  z kořenového souboru.

1600
 Bash – počítadla

1606
Počítadla  a  jsou definována v kořenovém souboru.
Neterminály
 nebudou expandovány, pouze se odeberou vnější závorky.
Nutno použít makro  z kořenového souboru.

1620
 .h – závorky , , , 

1626
Prázdný pár  (nebo prázdný symbol v závorkách ) slouží jako oddělovač symbolů.
Závorky kolem znaku komentáře  vypnou jeho původní význam, stejně jako vypnou význam silnějšího M4 komentáře .
Vypnou také původní význam čárky  jako oddělovače argumentů maker.
Tyto symboly se stanou obyčejnými terminálními symboly bez jakéhokoliv vedlejšího efektu.

1642
 AWK – příklady bezpečnějších maker

1648
Univerzální výstraha  se ignoruje bez závorek, stejně jako , , …
Taková makra explicitně vytváří vývojář skriptů, prohlédněte si kořenový soubor.

1662
Proč používat M4 a proč ne?

1662
Znaky {, , , } v názvu příkladu řídí expanzi neterminálů.

1670
 Proč generovat kód v M4

1676
přímé použití bezkontextové gramatiky
k transformaci dat stačí napsat minimum M4 kódu

1676
přímé použití automatů
možnost vymodelovat si potřebné algoritmy (M4 nepotřebuje verze)

1676
přímé použití zásobníků
zásobníky propojené s automaty rozšiřují možnosti generátoru kódu

1676
přímé použití výstupních front pro dočasné uložení výsledných částí kódu
jednotlivé fronty jsou na závěr vypsány na výstup ve vzestupném pořadí

1676
vyšší rychlost generování kódu (ve srovnání s XSLT)
nízké nároky na výpočetní zdroje

1726
 Proč se vyhnout M4

1732
univerzální jazyk nízké úrovně (podobně jako jazyk C)
nemůže konkurovat úzce specializovaným jazykům (například XSLT)

1732
neexistující komunita vývojářů (podzim 2019)
M4 je zapomenutý jazyk, málo existujících projektů

1732
neobvyklé programovací paradigma vyžadující splnění několika předpokladů
M4 je proto těžký jazyk

1732
produktivita značně závisí na zkušenostech (možný problém s termíny)
schopnost myslet v M4 je nutnost

1732
údržba špatně napsaného M4 kódu je těžká
existující M4 kód je snadné proměnit ve zmatek

---

62
Generování kódu v M4	vícejazyčná šablona s příklady pro www.root.cz (Root.cz – informace nejen ze světa Linuxu)

136
A General Purpose Macro-generator	Computer Journal 8, 3 (1965), 225–41

261
RATFOR — A Preprocessor for a Rational Fortran	Brian W. Kernighan

355
The M4 Macro Processor	Bell Laboratories (1977)

407
GNU M4 - GNU macro processor	Free Software Foundation

980
GNU Make Manual	Free Software Foundation

996
Vim – všudypřítomný textový editor	editující text rychlostí myšlenky

1022
Automaty a formální jazyky I	Učební text FI MU

1036
Automaty a gramatiky	Michal Chytil, 1. vydání, Praha, 331 s. 1984.

1038
Chomsky hierarchy	cover image
