# vim:wrap:spell:spelllang=en,en
# intro.mc	0xff31af1	20200115-09:36:42

9
Generating code in M4: introduction

18
The M4 macro processor is used to generate arbitrarily complex code from simple source code.
The introductory part of the series contains its history, the basic principles of language, examples of usage and prerequisites for master this brilliant tool.

26
Introduction

32
Readers of this series will learn how to write scripts for machine code generation.
The machine-generated code can be arbitrarily complex and can contain other internal dependencies.
Interdependent files with complex code are hardly sustainable for humans in a consistent state.
It is necessary to use some code generation mechanism.
The code generation is performed by a tool for text transformation – a macro processor.

47
The series focus on the practical use of the universal macro processor M4 (hereafter M4) using small examples.
It also describes the theoretical part of all its implementations.
The aim of the series is to acquaint the reader with this tool (m4 – is a command line program) and also the programming language (M4 – is a programming language).
What is it used for, how to program in it and its advantages and disadvantages.

61
[the result of the series is a set of sample scripts for generating code]

61
Multilingual series „Generating code in M4“ are generated by M4 scripts,
which will make it easier (maybe) for other authors to write articles on www.root.cz (Root.cz – information not only from the Linux world).

63
The introductory part describes the basic principles of the language with simple examples of use.
All examples use rewriting rules of context-free grammar.
Later we will learn how to use output queues,
automata, associative memories, stacks and pushdown automata.
We will also learn how to write testing automata to test input data.

79
Examples for readers

85
The examples are a complementary part of the series and will be based to some extent on the discussion below the article.
At the beginning of each episode, some parts of the M4 language will be described and supplemented with a set of examples at the end.
Each part can be read in any order.

96
Code generation examples

96
Preprocessor examples

96
M4 – examples

96
Why using M4 and why not?

96
http://github.com/jkubin/m4root (Generating code in M4) – a project generating HTML5 of this series

115
History of macro languages

121
Macro languages were invented at a time when the assembly language (ASM) dominated.
ASM source code usually contains identical instruction sequences that differ only in operand values.
Identical instruction sequences can be grouped into one word, or a macro instruction that directly describes the purpose of the hidden instruction sequence in its name.
These macro instructions are translated by the macro processor to the original instruction sequences, which are then translated into executable machine code.
Programming in ASM using macro instructions is simpler, faster and less prone to human errors.

136
Later, macro languages were used to extend compiled programming languages because they made it possible to write source code at a higher level of abstraction than offers the programming language itself.
The speed, performance and efficiency of a complex lower-level programming language is maintained through macro languages.
However, it is important to understand all layers of code well.

148
GPM (General Purpose Macro-generator)

152
Christopher Strachey (Wikipedia) introduced the basic idea of rewritable strings with arguments which recursively rewrite to other strings in his
GPM (General Purpose Macro-generator) in 1965.
The next generation of M3 and M4 macro processors basically just expanded the original GPM (General Purpose Macro-generator).
The basic idea of the original proposal remained the same.

167
M3

171
Dennis Ritchie (Wikipedia) took over the basic idea of GPM (General Purpose Macro-generator) and wrote an improved macro processor for generating source code of C (1972) language, which he himself designed.
The new macro processor was written for the minicomputer AP-3 – hence the name M3.
This direct ancestor of the current M4 managed to significantly save heavy and time-consuming work and attract developers programming to other languages (FORTRAN (FORmula TRANslation), COBOL (COmmon Business-Oriented Language), PL/I (Programming Language One), …).
Developers have customized M3 for these languages turning it into a universally usable M4 macro processor.

184
[m4 ∈ {set of UNIX tools}]

184
Dennis Ritchie was also a co-creator of UNIX and therefore:

184
M4 is minimalist and fast, it does one thing and it does well (UNIX philosophy)

184
it relies solely on the non-interactive command line interface

184
parameters and dependencies of M4 scripts are described by 

184
the  character begins with a one-line comment like in a UNIX shell

184
variables , , , , , , … have similar meanings as in a UNIX shell

184
the argument delimiter is comma

241
The M3 macro processor was also extended by Jim E. Weythman, the author of program construction, which is used in almost every M4 script:

248
[idiomatic M4 code]

257
The (divert(-1), divert(0), divert(1), …, divert(2147483647)) keyword switches output queues.
Argument  completely disables any text output.
Argument  switches output to  (standard output).

269
M4

273
Brian Kernighan (Wikipedia) has enhanced the M3 macro processor to the FORTRAN 66
preprocessor (Wikipedia) to create a hybrid language extension named RATFOR (RATional FORtran).
The basic program constructions of this extension (conditions, cycles) are the same as in C language.
Programming in RATFOR is similar to C programming.
The macro processor converts the source code back to FORTRAN, then the compiler performs the usual compilation to machine code.

288
[M4 language complements C language]

288
Note the almost perfect symbiosis with the C language:

288
CPP (C preprocessor) directives , , , … are comments for M4

288
most keywords separated from parentheses by a white character lose meaning

for example, M4 ignores 


288
macro arguments separate commas just like commas in C functions

if the  macro is defined, its variables are:

, , , 


288
the left control character  is not a part of the C family syntax

288
the right control character  does not matter if it is not part of the macro

both control characters can be hidden into user-defined macros , 

288
macros are written , just like nonterminal symbols (Wikipedia)
this delimits their namespace

367
The user manual mentions other co-authors not mentioned here.
So it would be fairly unfair to write that the authors of the M4 macro processor (1977) are only two people.

394
GNU M4

398
Today, there are several implementations that differ from the original implementation rather by small details.
The most common implementation of M4 is the GNU M4 used for Autotools (Wikipedia)
and for translating the simple  configuration file to complex .
The author of this implementation (1990) is René Seindal.
To install m4 (m4 with small letter „m“ is a program), type the following command:

413
[the command also installs other important packages]

417
A detailed description of the keywords can be found in the documentation:

431
Basics of M4

437
M4 is based on context-free grammar, automata, stacks and output queues.
To understand M4, it is therefore very important to understand the basic concepts of formal language theory –
what are terminal symbols (Wikipedia) (briefly terminals) and nonterminal symbols (briefly nonterminals).
These terms will be explained later in more detail.
The aim of this introductory part is mainly to show the basic practical use of M4 language on examples.

452
Context-free grammar

458
Context-free grammar (shortly CFG (Context-Free Grammar)) is a formal grammar in which all rewriting rules have the form .
The nonterminal  is rewritten to an arbitrarily long  (the right side of the rewriting rule) string composed of terminals or nonterminals.
Kleene star (Wikipedia)  means that the resulting string can be rewritten to  (epsilon – empty symbol).

469
[context-free grammar rewriting rules]

475
M4 rewriting rules

481
The M4 rewriting rules are the same as context-free grammar rewriting rules.

488
[M4 rewriting rules]

497
All M4 keywords are nonterminals (macros), they take some action (change the internal state of the macro processor) and rewrite to  (epsilon – empty symbol).
Keywords can be renamed.
This feature is very important for preprocessor mode.

508
[M4 keywords are nonterminals]

516
Nonterminal expansion control

522
The default character pair  in M4 controls the expansion of nonterminals.
The keyword  can change them to other characters, for example {, , }.
Nonterminals that we do not want to (immediately) expand are surrounded by this pair of characters.
When passing through a macro processor, all the symbols between this character pair are terminal symbols and the outer character pair is removed.
The next pass will cause the expansion of the originally protected nonterminals.
Control character pair is set at the beginning of the root file.

540
Automata

546
Automata use grammar rewriting rules as nodes and change their states according to input symbols.
The currently used rewriting rule produces specific code to the output queue (or several output queues) until the automaton moves to another node with a different rewriting rule.
Automata serve as „switches“ of grammar rules.
Examples of generating automata are in annex.

561
Output queues

567
Output queues are temporary storage for portions of the resulting code.
These parts of the resulting code are created by rewriting rules of grammar that rewrite input symbols.
The  keyword sets the current output queue.
Finally, all non-empty queues are dumped in ascending order on standard output and compose the final code.
Examples of output queues are in annex.

582
Stacks will be described later.

590
Main uses of M4

596
M4 is used to generate the source code of any programming language or as a preprocessor for any source code.

604
The code generation

610
M4 transforms input data from  (Macro Configuration) files to output data with the following command:

617
[← the_most_general.m4 … the_most_special.m4 →]

621
Two basic operations are performed during file loading:

628
reading transformation rules from files with the  extension

628
expansion of macros inside  files

646
The  and  files contain the input data in a format that allows them to be transformed into output data according to the rules in the previous  files.
The data  files usually do not contain any transformation rules.

655
Input data may also come from the pipeline:

662
[input code → source code generation → file]

666
[input code → source code generation → program]

670
Try: Code generation examples

678
The preprocessor

684
M4 can operate in preprocessor mode.
The input source code passes through it unchanged except for nonterminal symbols.
The nonterminals found are expanded to terminals and output along with the source code.
M4 can extend any other language where the preprocessor is insufficient (no recursion) or none.
It is important to select the left character for nonterminal expansion control, which must not collide with the input source code character.
However the character collision is easy to solve.

701
[M4 as preprocessor – in general]

705
[M4 as preprocessor – without intermediate file]

709
M4 in preprocessor mode can be part of a pipeline.
The conflicting character  from the input source code is hidden into a macro, for example .
An empty pair of control characters  before the macro serves as a symbol separator.

723
[M4 as preprocessor with control characters: `']

727
When the source code is passed through the macro processor, the  macro is rewritten back to the original  character and the empty pair  is removed.
If square brackets are used to control the expansion of nonterminals, the left  square bracket must be hidden in the same way.

736
[M4 as preprocessor with control characters: []]

740
Non printable characters  () and  () can be used to control the expansion of nonterminals.
These characters can not interfere with printable source code characters.

749
[M4 as preprocessor with control characters: ␂␆]

755
Try: Preprocessor examples

760
Mixed mode

766
Mixed mode is a combination of the previous modes and is mainly used for experiments.
The data is not separated from the rules for its transformation.
The leaf file  contains transformation rule definitions along with input data.

777
[how to learn M4]

781
Try: M4 – examples

786
Prerequisites for mastering M4

792
To successfully master this macro language it is important to fulfill several prerequisites.
M4 is not a simple language because it is not possible to think and program in it like an ordinary programming language.
The most important thing to realize is that it is used to program grammar rewriting rules.
Each string is either a terminal or a nonterminal symbol, including all language keywords (characters  and  are special cases of nonterminals).

805
M4 intentionally does not have keywords for cycles (/) because its basis is quite different from procedural or functional languages.

805
loops are only left-recursive or right-recursive

805
branching is made by symbol concatenation or ,  keywords

837
Fundamentals of grammars

843
All grammars are based on rewriting rules, which form generally describes:

851
Formal grammar (Chomsky type)

868
Formal grammar (Wikipedia) describes subsets (Wikipedia – Chomsky hierarchy) of formal language (Wikipedia) rewriting rules.
One of the subsets is named context-free grammar (Wikipedia), shortly CFG (Context-Free Grammar).
The CFG rewriting rules work the same as M4 rewriting rules.
Some of the following episodes of this series will focuses in more detail on formal grammars.

882
Fundamentals of automata

888
The ability to use predominantly two-state automata is an essential thing for writing simple M4 scripts because the vast majority of scripts use small automata.

896
Testing automaton

902
Order of input symbols or their context can be tested by the automaton.
If the input symbols meet the required properties, the automaton ends up in the double-ring node (indicates the accepting state or states).

926
Previous automaton can be written as an ASCII art accompanying the M4 script:

933
[ASCII-art for M4 code documentation]

943
Generating automaton

949
Input symbols change the nodes of the automaton, thereby changing the rewriting rules for code generation.
See the annex for this example:

958
[ASCII-art of generating automaton]

964
The first error message generates a header and inserts the first item.
Then automaton make transition to  state in which only next items are added.
The automaton remains in this state until all data has been processed.

976
(GNU) make

984
A well-designed code generator usually consists of several smaller files whose order, dependencies and parameters are written to the  file.
Good knowledge of  writing is therefore a prerequisite for mastering M4.
Reading and maintaining source code generally takes more time than creating it.
A well-structured  therefore significantly contributes to the overall clarity of the resulting code generator.

997
[we will deal with this topic at another part]

997
Executing  from the code editor with a shortcut key will significantly speed up M4 code development.
The file  contains .

1007
Vim

1013
Mastering the Vim editor is an important prerequisite for the convenience and speed of writing M4 code.
Vim shortcuts, defined by the  keyword, will save large amounts of unnecessary typing.
These shortcuts also significantly reduce the occurrence of almost invisible errors caused by an unpaired bracket, thus saving the lost time spent on debugging.

1033
Talent and time

1039
M4 cannot be mastered over the weekend, especially when the fundamentals of
automata theory (Wikipedia) and formal grammars (Wikipedia) are lacking.
To master the M4, you need to spend a longer period of time and write a lot of bad (complex) M4 code that you rewrite for a better idea.
In this way it is possible to gradually gain some practice.

1057
[M4 is a hard ⚠ language!]

1057
Disclaimer 🕱: Larger M4 projects require practice!

1065
Code generation examples

1065
Chars. {, , , } in the name controls the expansion of nonterminals.

1073
The examples in this annex are more complex and are intended to demonstrate the practical use of M4.
They will be explained in more detail later.

1083
 Input source code

1089
The input source code is similar to CSV (Comma Separated Values), which is converted to arbitrarily complex target code of another language using CFG (Context-Free Grammar), automata and output queues.
Stacks in the examples are not used.

1098
[input source code contains special characters ⚠]

1100
The input file may also contain notes that may not be hidden in the comments , ,  or .

1108
 CSV – simplest example

1114
This example does not use output queues, it only generates CSV (Comma Separated Values) separated by .

1124
 CSV – counter

1130
The example uses the  macro from the root file whose  (the right side of the rewriting rule) is copied to the right side of the  macro.
During the first expansion of  its initial value is initialized.
Further expansion returns the numeric terminal symbol and increases the auxiliary (global) symbol by one.
 is a small automaton.

1146
(solution) Modification of special characters

1152
Each type of output code requires modification of special characters.
The M4  keyword is inappropriate for this type of task.
First, we hide all special characters of the input file into appropriately named macros using regular expressions.

1171
Modified input code

1177
[all special characters are hidden into macros]

1179
We create several conversion files according to the target code type:

1186
 XML, XSLT, HTML

1190
[conversion file for markup languages]

1193
 C, JSON, INI – 

1198
[conversion file for a source code]

1201
 Bash – 

1206
[conversion file for Bash strings in quotation marks]

1208
 Bash – 

1213
[conversion file for Bash strings in apostrophes]

1215
 CSV, M4

1219
[the conversion file returns all special characters back]

1222
 C – output queue

1228
The example uses one output queue for characters  to close the array at the end.

1238
 INI – an external command

1244
The example runs an external  command and places its output in square brackets.
The output of an external command are two comma-separated items.
The  macro selects the first item because the second item contains an unwanted  () new line character.

1258
 .h – hex counter

1264
The example uses the  macro to number the resulting CPP (C preprocessor) macros and one output queue.
The queue number  contains the preprocessor directive  to terminate the header file.
The decimal value of the counter is converted to the two-digit hex digit by keyword .

1279
 C – small automaton

1285
The example uses a small automaton  to generate a newline  character and one output queue number  containing  characters to terminate resulting string.
For the first time the  is rewritten to  (epsilon – empty symbol), for the second time is rewritten to .

1297
 C – small automaton 2

1303
This example is similar to the previous one, but each string is on a new line.

1313
 HTML – output queues

1319
The example uses two output queues.
The queue number  contains paragraphs.
The queue number  contains closing HTML tags.
Navigation links do not have to be stored anywhere, they go straight to the output.
The  and  messages are processed in the same way as  messages.

1336
 Branching by grammar

1342
The example shows branching by grammar, macro arguments are ignored.
Input nonterminals are rewritten to terminals (🐛), (🐜), (🐝).

1354
 JSON – generating automaton

1360
The example uses two output queues and one generating automaton.
The first  error message in the  state generates a header with brackets and outputs the first record.
The automaton goes to the state  which is a  rule (rule is used as the right side of another rewriting rule).
The following error messages in the  state only output individual records.
At the end the output queue number  and number  print the characters  and  to close the resulting JSON.

1378
 JSON – named queues

1384
The example processes other types of messages  and .
It uses three automata and six output queues.
If we generate more complex source code, we will soon encounter the problem of maintaining index consistency for output queues.
To avoid confusion, we use queue names instead of numbers.

1406
To avoid having to define similar rules, we copy the right side of  (it is also a  rule (rule is used as the right side of another rewriting rule)) to the right side of the  and  rules.
The  variable is rewritten to the name of the macro and concatenated with another symbol.
The newly formed nonterminal is rewritten to the corresponding terminal symbol.
In this way branching is carried out.

1419
[grammar branching in M4]

1432
 JSON – generated queue indexes

1438
During development, the order and number of output queues often change, which also requires frequent changes of their indexes.
It is therefore appropriate to generate indexes.
We can then use a virtually unlimited number of queues.
The following example shows how these indexes are generated.

1454
 INI – discontinuous queue index

1460
The example uses three automata and two output queues number  and  defined in a separate file.
INI section names are generated by symbol chaining.
The example uses the same file for output queues as the example to generate JSON.

1474
 XML – mixed messages

1480
The example uses one output queue number  for the  closing tag.

1490
 XML – separated messages

1496
The example groups messages by their type using output queues.

1506
 Bash 

1515
 Bash 

1524
Preprocessor examples

1524
Chars. {, , , } in the name controls the expansion of nonterminals.

1530
 C preprocessor and M4

1536
The CPP (C preprocessor) directives are a one-line comment for M4, preventing unwanted expansion of the same named macros.
If we define a safer  macro, the same named  macro will not be overwritten.
Thus, the CPP (C preprocessor) namespace can be completely separated from the M4 namespace.
The problematic character  is hidden in the  macro.
Apostrophe  does not matter in the source code.
Apostrophe inside  macro is hidden in  macro.
Note the  or  function names and where the  is expanded.

1558
 CSS – comments

1564
CSS uses the  character for color codes, which is also the beginning of a one-line M4 comment.
The  keyword sets a multiline  comment and rewrites into  (epsilon – empty symbol).
The comments can be turned off with the same  keyword without parameters.

1578
 Bash – nonprintable characters

1584
Bash uses both characters  .
If we do not want to hide them in an  or  macro, we can use nonprintable characters for expansion control see example:

1596
M4 – examples

1596
Chars. {, , , } in the name controls the expansion of nonterminals.

1603
 JSON – left bracket 

1609
The  inside square brackets.
Therefore, the left square bracket  is replaced by the  macro defined in the root file.

1621
 Bash – counters

1627
The  and  counters are defined in the root file.
The  will not be expanded, only the outer brackets will be removed.
The  macro defined in the root file must be used.

1641
 .h – brackets , , , 

1647
The empty pair  (or empty symbol in brackets ) serves as a symbol separator.
Brackets around the comment character  turn off its original meaning as well as turn off the meaning of the more powerful M4 comment .
They also turn off the original meaning of the comma  as a macro argument delimiter.
These symbols become ordinary terminal symbols without any side effect.

1663
 AWK – examples of safer macros

1669
The universal alert  is ignored without parentheses, like , , …
Such macros are explicitly created by a script developer, see the root file.

1683
Why using M4 and why not?

1683
Chars. {, , , } in the name controls the expansion of nonterminals.

1691
 Why generate code in M4

1697
direct use of context-free grammar (recursion for free)
a minimum M4 code is required for data transformation

1697
direct use of automata
possibility to model necessary algorithms (M4 does not need versions)

1697
direct use of stacks
stacks connected to automata extend the capabilities of the code generator

1697
direct use of output queues to temporarily store the resulting pieces of code
the individual queues are finally dumped to output in ascending order

1697
faster code generation (compared to XSLT)
low demands on computing resources

1747
 Why avoid M4

1753
low-level universal language (similar to C)

can not compete with narrowly specialized languages (for example XSLT)


1753
non-existent developer community (Autumn 2019)
M4 is a forgotten language, small amount of existing projects

1753
an unusual programming paradigm requiring several prerequisites
M4 is therefore a hard language

1753
productivity greatly depends on experience (possible problem with deadlines)
the ability to think in M4 is an essential necessity

1753
maintaining a badly written M4 code is difficult
existing M4 code is easy to turn into confusion

---

61
Generating code in M4	multilingual template with examples for www.root.cz (Root.cz – information not only from the Linux world)

152
A General Purpose Macro-generator	Computer Journal 8, 3 (1965), 225–41

273
RATFOR — A Preprocessor for a Rational Fortran	Brian W. Kernighan

367
The M4 Macro Processor	Bell Laboratories (1977)

417
GNU M4 - GNU macro processor	Free Software Foundation

997
GNU Make Manual	Free Software Foundation

1013
Vim – the ubiquitous text editor	editing text at the speed of thought

1039
Automaty a formální jazyky I	Učební text FI MU

1053
Automaty a gramatiky	Michal Chytil, 1. vydání, Praha, 331 s. 1984.

1055
Chomsky hierarchy	cover image
